<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A Place to Write Things</title>
    <description>Just writing</description>
    <link>http://liuwei.co/</link>
    <atom:link href="http://liuwei.co/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 25 Dec 2016 00:14:21 +0800</pubDate>
    <lastBuildDate>Sun, 25 Dec 2016 00:14:21 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>iOS10请求隐私权限的设置 - Info.plist</title>
        <description>&lt;p&gt;在访问用户手机通讯录,相册,地址,日历等隐私数据前需要向用户请求使用权限，在iOS10中，Apple拓展了隐私控制域，你必须在&lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;文件中对所有需要访问的隐私数据作出声明。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20161224/ios10.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;frameworkinfoplistprivacy-key&quot;&gt;哪些&lt;code class=&quot;highlighter-rouge&quot;&gt;framework&lt;/code&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;中有&lt;code class=&quot;highlighter-rouge&quot;&gt;privacy key&lt;/code&gt;：&lt;/h5&gt;

&lt;p&gt;Calendar , Contact , Reminder , Photo , Bluetooth Sharing , Microphone , Camera , Location , Heath , HomeKit , Media Library , Motion , CallKit , Speech Recognition , SiriKit , TV Provider.&lt;/p&gt;

&lt;h5 id=&quot;privacy-key&quot;&gt;如果不提供&lt;code class=&quot;highlighter-rouge&quot;&gt;privacy key&lt;/code&gt;会报什么错误：&lt;/h5&gt;

&lt;p&gt;如果你不在&lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;中提供指定的&lt;code class=&quot;highlighter-rouge&quot;&gt;privacy key&lt;/code&gt;，你的应用程序会没有任何商量余地的直接崩溃！以下是崩溃日志：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The app has crashed because it attempted to access privacy-sensitive data without a usage description. The app&#39;s Info.plist must contain an NSCalendarsUsageDescription key with a string value explaining to the user how the app user how the app uses this data.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;section&quot;&gt;如何解决这个错误呢:&lt;/h5&gt;

&lt;p&gt;当然是根据你相应的请求在Info.pist中给出相应的privacy key啦。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20161224/privacykeys.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar :&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
Key      :  Privacy - Calendars Usage Description    &lt;br /&gt;
Value  :  $(PRODUCT_NAME) calendar events&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Reminder :&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
Key      :   Privacy - Reminders Usage Description    &lt;br /&gt;
Value  :   $(PRODUCT_NAME) reminder use&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Contact :&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
Key       :   Privacy - Contacts Usage Description     &lt;br /&gt;
Value    :  $(PRODUCT_NAME) contact use&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Photo :&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
Key       :  Privacy - Photo Library Usage Description    &lt;br /&gt;
Value   :  $(PRODUCT_NAME) photo use&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bluetooth Sharing :&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
Key       :  Privacy - Bluetooth Peripheral Usage Description     &lt;br /&gt;
Value   :  $(PRODUCT_NAME) Bluetooth Peripheral use&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Microphone :&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
Key        :  Privacy - Microphone Usage Description    &lt;br /&gt;
Value    :  $(PRODUCT_NAME) microphone use&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Camera :&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
Key       :  Privacy - Camera Usage Description   &lt;br /&gt;
Value   :  $(PRODUCT_NAME) camera use&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Location :&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
Key      :  Privacy - Location Always Usage Description   &lt;br /&gt;
Value  :  $(PRODUCT_NAME) location use&lt;/p&gt;

&lt;p&gt;Key       :  Privacy - Location When In Use Usage Description   &lt;br /&gt;
Value   :  $(PRODUCT_NAME) location use&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Heath :&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
Key      :  Privacy - Health Share Usage Description   &lt;br /&gt;
Value  :  $(PRODUCT_NAME) heath share use&lt;/p&gt;

&lt;p&gt;Key      :  Privacy - Health Update Usage Description   &lt;br /&gt;
Value  :  $(PRODUCT_NAME) heath update use&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HomeKit :&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
Key      :  Privacy - HomeKit Usage Description   &lt;br /&gt;
Value  :  $(PRODUCT_NAME) home kit use&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Media Library :&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
Key      :  Privacy - Media Library Usage Description   &lt;br /&gt;
Value  :  $(PRODUCT_NAME) media library use&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Motion :&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
Key      :  Privacy - Motion Usage Description   &lt;br /&gt;
Value  :  $(PRODUCT_NAME) motion use&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Speech Recognition :&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
Key      :  Privacy - Speech Recognition Usage Description   &lt;br /&gt;
Value  :  $(PRODUCT_NAME) speech use&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SiriKit  : &lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
Key      :  Privacy - Siri Usage Description  &lt;br /&gt;
Value  :  $(PRODUCT_NAME) siri use&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TV Provider : &lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
Key      :  Privacy - TV Provider Usage Description   &lt;br /&gt;
Value  :  $(PRODUCT_NAME) tvProvider use&lt;/p&gt;

&lt;p&gt;谢谢阅读&lt;/p&gt;

&lt;p&gt;原文链接: &lt;a href=&quot;https://iosdevcenters.blogspot.com/2016/09/infoplist-privacy-settings-in-ios-10.html&quot;&gt;https://iosdevcenters.blogspot.com/2016/09/infoplist-privacy-settings-in-ios-10.html&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Announcement:&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
能力一般，水平有限，翻译不到位的地方请硬看！&lt;br /&gt;
如果实在看不下去请关闭网页，深呼吸，抑或是抽根烟，以解心中不快。&lt;br /&gt;
如果还觉得不爽，欢迎来&lt;a href=&quot;https://twitter.com/AwesomeEpisode&quot;&gt;twitter&lt;/a&gt;上找我互相伤害。&lt;br /&gt;
本文翻译遵照 &lt;a href=&quot;https://zh.wikipedia.org/wiki/Wikipedia:CC&quot;&gt;CC 协议&lt;/a&gt;，如果侵犯到了您的权益，请及时发Email(i#liuwei.co)联系我，谢谢！&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sat, 24 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://liuwei.co/error/info.plist/ios/ios%2010/privacy%20settings/swift%202.3/swift%203.0/xcode%208.0/2016/12/24/infoplist-privacy-settings-in-ios-10.html</link>
        <guid isPermaLink="true">http://liuwei.co/error/info.plist/ios/ios%2010/privacy%20settings/swift%202.3/swift%203.0/xcode%208.0/2016/12/24/infoplist-privacy-settings-in-ios-10.html</guid>
        
        
        <category>Error</category>
        
        <category>Info.plist</category>
        
        <category>iOS</category>
        
        <category>iOS 10</category>
        
        <category>Privacy Settings</category>
        
        <category>Swift 2.3</category>
        
        <category>Swift 3.0</category>
        
        <category>Xcode 8.0</category>
        
      </item>
    
      <item>
        <title>UIScrollView 教程（swift）</title>
        <description>&lt;p&gt;UIScrollView 在ios开发中是非常有用的控件之一。它是UITableView的基础，并且是展示内容大于屏幕的一种非常好的方式。在这篇UIScrollView教程中，你将学到这个控件的如下使用方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如何使用一个UIScrollView展示一张大图。&lt;/li&gt;
  &lt;li&gt;当缩放UIScrollView的时候，如何保持UIScrollView的content居中。&lt;/li&gt;
  &lt;li&gt;如何嵌入复杂的视图到UIScrollView。&lt;/li&gt;
  &lt;li&gt;如何使用UIScrollView的可翻页特性，如何配合UIPageControl，进行滚动翻页显示。&lt;/li&gt;
  &lt;li&gt;如何显示当前页的时候能够看到上一页/下一页的内容。&lt;/li&gt;
  &lt;li&gt;还有更多！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这篇教程假定你熟悉swift和ios编程。如果你是一个新手，也许你希望从本网站了解一些&lt;a href=&quot;http://www.raywenderlich.com/?page_id=2519&quot;&gt;其他教程&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;同样，这篇教程也假定你知道怎么使用Interface Builder来添加新控件到一个View上，并在你的代码和Storybard之间进行连接。在继续之前你需要熟悉Storyboards，所以如果你对Storyboards或者Interface Builder不熟悉，你需要在本站看看这些&lt;a href=&quot;http://www.raywenderlich.com/?p=5138&quot;&gt;Storyboards教程&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;开始&lt;/h2&gt;

&lt;p&gt;打开Xcode创建一个新的项目，选择&lt;code class=&quot;highlighter-rouge&quot;&gt;File\New\Project…&lt;/code&gt;,然后选择&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS\Application\Single View Application&lt;/code&gt;模板，在product name输入&lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollViews&lt;/code&gt;，在language一栏选择Swift，然后在devices上选择&lt;code class=&quot;highlighter-rouge&quot;&gt;iPhone&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20150818/Create_Project-700x413.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击&lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt;,然后选择一个目录存放你的项目。&lt;/p&gt;

&lt;p&gt;然后，为这个项目&lt;a href=&quot;http://cdn1.raywenderlich.com/downloads/ScrollViewsResources.zip&quot;&gt;下载资源&lt;/a&gt;，然后拖动解压后的文件到项目根目录，确保&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Copy items if needed&quot;&lt;/code&gt;复选框是选中状态。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20150818/Copy_Resources-700x412.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于这篇教程打算阐明scroll view的四个用法，这个项目将用一个四个选项的tableview菜单，每一个选项将打开一个新的view controller来显示scroll view的某一用法。&lt;/p&gt;

&lt;p&gt;当你完成后，应该类似下面的样子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20150818/Storyboard_Overall-655x500.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;构建tableview菜单，需要以下步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;打开Main.storyboard，删除已经存在的view controller&lt;/li&gt;
  &lt;li&gt;这篇教程关闭了Auto Layout。从Utilities面板，选择File Inspector，然后取消Use Auto Layout复选框，在弹出框上，确保“Keep size class data for:”是选择了iPhone，然后选择Disable Size Classes按钮。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20150818/Disable_Size_Classes.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;下一步，在storyboard上添加一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Table View Controller&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;现在，选中你添加的table，然后选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Editor\Embed In\Navigation Controller&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;选中新的Navigation Controller，然后在Attributes inspector上选中&lt;code class=&quot;highlighter-rouge&quot;&gt;Is Initial View Controller&lt;/code&gt;复选框。&lt;/li&gt;
  &lt;li&gt;在table view controller上选择table view，然后在attributes inspector设置content type为静态单元格&lt;code class=&quot;highlighter-rouge&quot;&gt;Static Cells&lt;/code&gt;（如下图所示）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20150818/Static_Cells.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在storyboard层级上，在文档大纲上点击Table View左边的箭头，然后选中&lt;code class=&quot;highlighter-rouge&quot;&gt;Table View Section&lt;/code&gt;。在inspector，设置行的数量为4.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20150818/UIScrollView-table-view-section.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;table view的每一行，设置style为&lt;code class=&quot;highlighter-rouge&quot;&gt;Basic&lt;/code&gt;,然后编辑labels内容如下：
    &lt;ul&gt;
      &lt;li&gt;Image Scroll&lt;/li&gt;
      &lt;li&gt;Custom View Scroll&lt;/li&gt;
      &lt;li&gt;Paged&lt;/li&gt;
      &lt;li&gt;Paged with Peeking&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;

  &lt;p&gt;备注：当你设置每个table row的style为“Basic”，table row将得到一个额外的子控件 － label，你需要再次展开它来编辑他们。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;保存storyboard，然后编译运行。你会看到你的table view，类似下面的图片，遗憾的事，此时此刻tableview还没有任何东西，但是你可以修复它！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20150818/Scroll_View_Run_11-281x500.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;滚动和缩放一张大图&lt;/h2&gt;

&lt;p&gt;你需要学习的第一件事是如何设置一个scroll view，允许用户缩放和平移。&lt;/p&gt;

&lt;p&gt;首先，你需要一个建立一个view controller。打开&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController.swift&lt;/code&gt;， 然后在顶部定义类的地方，让他实现&lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollViewDelegate&lt;/code&gt;协议。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ViewController: UIViewController, UIScrollViewDelegate {
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在类定义的内部，添加下面的outlet属性：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@IBOutlet var scrollView: UIScrollView!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下一步你需要连接这个属性到真实的scroll view。&lt;/p&gt;

&lt;p&gt;打开storyboard，并且从对象库中拖动一个&lt;code class=&quot;highlighter-rouge&quot;&gt;View Controller&lt;/code&gt;到画布，选中这个新的view controller，并且在Identity Inspector上设置class为&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/View_controller_class-_type.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个view controller将显示一个图片事例。从table view的&lt;code class=&quot;highlighter-rouge&quot;&gt;Image Scroll&lt;/code&gt;行上按住control键单击，然后拖动到新的view controller。在弹出的菜单上,选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Selection Segue&lt;/code&gt;下的&lt;code class=&quot;highlighter-rouge&quot;&gt;Push&lt;/code&gt;选项。这样，当用户选择第一行，view controller被推到了navigation的栈上。&lt;/p&gt;

&lt;p&gt;从对象库里拖动一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Scroll View&lt;/code&gt;填充到view controller上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/Add_Scroll_View-293x500.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;把scroll view连接到view controller，并且把scroll view的代理（delegate）设置为view controller。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/Scroll_View_Outlets.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在，你需要坐下来并且编写你的代码，打开&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController.swift&lt;/code&gt;,并且添加一个新的属性：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var imageView: UIImageView!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这将在用户四处滚动的时候持有image view。&lt;/p&gt;

&lt;p&gt;现在，是时候设置scroll view最有趣的部分了。用以下代码替换&lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;override func viewDidLoad() {
  super.viewDidLoad()
 
  // 1
  let image = UIImage(named: &quot;photo1.png&quot;)!
  imageView = UIImageView(image: image)
  imageView.frame = CGRect(origin: CGPoint(x: 0, y: 0), size:image.size)
  scrollView.addSubview(imageView)
 
  // 2
  scrollView.contentSize = image.size
 
  // 3
  var doubleTapRecognizer = UITapGestureRecognizer(target: self, action: &quot;scrollViewDoubleTapped:&quot;)
  doubleTapRecognizer.numberOfTapsRequired = 2
  doubleTapRecognizer.numberOfTouchesRequired = 1
  scrollView.addGestureRecognizer(doubleTapRecognizer)
 
  // 4
  let scrollViewFrame = scrollView.frame
  let scaleWidth = scrollViewFrame.size.width / scrollView.contentSize.width
  let scaleHeight = scrollViewFrame.size.height / scrollView.contentSize.height
  let minScale = min(scaleWidth, scaleHeight);
  scrollView.minimumZoomScale = minScale;
 
  // 5
  scrollView.maximumZoomScale = 1.0
  scrollView.zoomScale = minScale;
 
  // 6
  centerScrollViewContents()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这似乎看起来有些复杂，所以让我们一步一步分解它。你会觉得它并没有那么糟糕。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先，你需要用你之前添加到项目的&lt;code class=&quot;highlighter-rouge&quot;&gt;photo1.png&lt;/code&gt;图片创建一个image view，这里强制解包表示如果它找不到photo1.png图片则会崩溃。这会早点提醒你不要忘记添加那个文件到项目中。下一步，你设置image view的frame（它的大小和位置），让他位于父视图的(0,0)坐标点和它的尺寸，最后，添加image view作为scroll view的子视图。&lt;/li&gt;
  &lt;li&gt;你需要告诉scroll view的contentsize，让它知道可以横向纵向可以滚动多远，在当前这个例子，它的contentsize是图片的size。&lt;/li&gt;
  &lt;li&gt;这里设置双击放大手势，你不需要&lt;code class=&quot;highlighter-rouge&quot;&gt;UIPinchGestureRecognizer&lt;/code&gt;来放大，因为UIScrollView已经内置有一个了！&lt;/li&gt;
  &lt;li&gt;下一步，你需要为scroll view计算出最小缩放，一个zoom scale表示content被正常显示的大小，小于1的zoom scale显示缩小内容，大于1的zoom scale显示放大的内容。获取最小的zoom scale，你基于它的宽度计算需要缩小多少让图片正好适配scroll view的边界。然后你需要针对图片的高度作出同样的计算，那两个最小的计算结果是scroll view的最小缩放。当完全缩小你可以看见全部的图片。&lt;/li&gt;
  &lt;li&gt;你设置最大缩放为1，因为放到比图片的分辨率还大会引起图片模糊，你设置初始缩放为最小，让图片已开始完全缩小。&lt;/li&gt;
  &lt;li&gt;调用一个帮助方法让图片在scroll view居中，帮助方法在哪里，下面就来讲。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;centerScrollViewContents&lt;/code&gt;的实现到类中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func centerScrollViewContents() {
  let boundsSize = scrollView.bounds.size
  var contentsFrame = imageView.frame
 
  if contentsFrame.size.width &amp;lt; boundsSize.width {
    contentsFrame.origin.x = (boundsSize.width - contentsFrame.size.width) / 2.0
  } else {
    contentsFrame.origin.x = 0.0
  }
 
  if contentsFrame.size.height &amp;lt; boundsSize.height {
    contentsFrame.origin.y = (boundsSize.height - contentsFrame.size.height) / 2.0
  } else {
    contentsFrame.origin.y = 0.0
  }
 
  imageView.frame = contentsFrame
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个方法的关键是解决一个小问题：如果scroll view的contentsize比它的边界小，然后它位于左上角，而不是在中心，如果你允许用户完全缩小，如果图片在视图中心将是极好的。这个方法实现了让图片始终在scroll view边界的中心。&lt;/p&gt;

&lt;p&gt;最后，添加&lt;code class=&quot;highlighter-rouge&quot;&gt;scrollViewDoubleTapped&lt;/code&gt;的实现到类中，实现双击手势。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func scrollViewDoubleTapped(recognizer: UITapGestureRecognizer) {
  // 1        
  let pointInView = recognizer.locationInView(imageView)
 
  // 2
  var newZoomScale = scrollView.zoomScale * 1.5
  newZoomScale = min(newZoomScale, scrollView.maximumZoomScale)
 
  // 3
  let scrollViewSize = scrollView.bounds.size
  let w = scrollViewSize.width / newZoomScale
  let h = scrollViewSize.height / newZoomScale
  let x = pointInView.x - (w / 2.0)
  let y = pointInView.y - (h / 2.0)
 
  let rectToZoomTo = CGRectMake(x, y, w, h);
 
  // 4
  scrollView.zoomToRect(rectToZoomTo, animated: true)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当双击的时候这个方法被调用，下面一步一步指导发生了什么：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先，你需要知道在图片控件的哪里被点击了，你需要直接在那个点上放大，这或许是作为一个用户所期望的。&lt;/li&gt;
  &lt;li&gt;下一步，你计算一个zoom scale让它放大150%，但是超过了你在&lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt;里面定义的最大缩放。&lt;/li&gt;
  &lt;li&gt;然后使用第一步的位置来计算一个用来放大的&lt;code class=&quot;highlighter-rouge&quot;&gt;CGRect&lt;/code&gt;矩形。&lt;/li&gt;
  &lt;li&gt;最后，你需要告诉scroll view放大，并且这里你需要让他看起来有一个不错的动画。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;关于ios不同手势的更多信息，查看&lt;a href=&quot;http://www.raywenderlich.com/?p=76020&quot;&gt;UIGestureRecognizer tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在，还记住你是如何设置&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;作为&lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollViewDelegate&lt;/code&gt;的吗？是的，现在你需要实现那个协议里面的一些方法。添加下面的方法到类中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func viewForZoomingInScrollView(scrollView: UIScrollView!) -&amp;gt; UIView! {
  return imageView
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这是scroll view缩放机制的核心，它告诉scroll view当捏放的时候哪个视图需要变的更大或者更小。所以告诉它是&lt;code class=&quot;highlighter-rouge&quot;&gt;imageView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;最后，添加下面的代理方法到类中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func scrollViewDidZoom(scrollView: UIScrollView!) {
  centerScrollViewContents()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当用户完成缩放scroll view将调用这个方法，这里，你需要view重新放到中心，scroll view不会自然的出现放大，取而代之的是，它会排在左上角。&lt;/p&gt;

&lt;p&gt;现在，深呼吸，给你自己拍拍后背，编译并且运行你的项目！如果一切顺利，在&lt;code class=&quot;highlighter-rouge&quot;&gt;scroll view&lt;/code&gt;上单击。你最终会有一个完美的可以缩放，移动和单击的图片，太棒了！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/Scroll_View_Run_2-281x500.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;滚动和缩放一个有层级的视图&lt;/h2&gt;

&lt;p&gt;如果你希望在你的scroll view里面放多个视图，而不仅仅是一张图片，如果你有一个复杂的层级视图需要可以被缩放和移动，当然，scroll view可以做到这些！更重要的是，它在你已经完成的基础上仅仅需要一小步。&lt;/p&gt;

&lt;p&gt;创建一个新文件，选择&lt;code class=&quot;highlighter-rouge&quot;&gt; iOS\Source\Cocoa Touch Class &lt;/code&gt;模板。设置class名为&lt;code class=&quot;highlighter-rouge&quot;&gt;CustomScrollViewController&lt;/code&gt;，然后设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;的子类，确保“Also create XIB file” 复选框没有选中，设置语言为&lt;code class=&quot;highlighter-rouge&quot;&gt;swift&lt;/code&gt;.点击&lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt;然后保存到项目里。&lt;/p&gt;

&lt;p&gt;打开&lt;code class=&quot;highlighter-rouge&quot;&gt;CustomScrollViewController.swift&lt;/code&gt;,然后用下面的内容替换：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit
 
class CustomScrollViewController: UIViewController, UIScrollViewDelegate {
  @IBOutlet var scrollView: UIScrollView!
 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下一步，打开&lt;code class=&quot;highlighter-rouge&quot;&gt;Main.storyboard&lt;/code&gt;,像刚刚一样添加&lt;code class=&quot;highlighter-rouge&quot;&gt;View Controller&lt;/code&gt;并从table view的第二行连线。设置view controller的class为你刚刚创建的&lt;code class=&quot;highlighter-rouge&quot;&gt;CustomScrollViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;添加一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Scroll View&lt;/code&gt;并且连接它到outlet，并且像刚刚一样设置view controller作为它的代理。&lt;/p&gt;

&lt;p&gt;然后，打开&lt;code class=&quot;highlighter-rouge&quot;&gt;CustomScrollViewController.swift&lt;/code&gt;并且在scrollView outlet下面的添加属性：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var containerView: UIView!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;与之前不同的是containerView替代了&lt;code class=&quot;highlighter-rouge&quot;&gt;UIImageView&lt;/code&gt;,它是怎样工作的应该是一个小小的提示。&lt;/p&gt;

&lt;p&gt;现在，像这样实现&lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;override func viewDidLoad() {
  super.viewDidLoad()
 
  // Set up the container view to hold your custom view hierarchy
  let containerSize = CGSize(width: 640.0, height: 640.0)
  containerView = UIView(frame: CGRect(origin: CGPoint(x: 0, y: 0), size:containerSize))
  scrollView.addSubview(containerView)
 
  // Set up your custom view hierarchy
  let redView = UIView(frame: CGRect(x: 0, y: 0, width: 640, height: 80))
  redView.backgroundColor = UIColor.redColor();
  containerView.addSubview(redView)
 
  let blueView = UIView(frame: CGRect(x: 0, y: 560, width: 640, height: 80))
  blueView.backgroundColor = UIColor.blueColor();
  containerView.addSubview(blueView)
 
  let greenView = UIView(frame: CGRect(x: 160, y: 160, width: 320, height: 320))
  greenView.backgroundColor = UIColor.greenColor();
  containerView.addSubview(greenView)
 
  let imageView = UIImageView(image: UIImage(named: &quot;slow.png&quot;))
  imageView.center = CGPoint(x: 320, y: 320);
  containerView.addSubview(imageView)
 
  // Tell the scroll view the size of the contents
  scrollView.contentSize = containerSize;
 
  // Set up the minimum &amp;amp; maximum zoom scales
  let scrollViewFrame = scrollView.frame
  let scaleWidth = scrollViewFrame.size.width / scrollView.contentSize.width
  let scaleHeight = scrollViewFrame.size.height / scrollView.contentSize.height
  let minScale = min(scaleWidth, scaleHeight)
 
  scrollView.minimumZoomScale = minScale
  scrollView.maximumZoomScale = 1.0
  scrollView.zoomScale = 1.0
 
  centerScrollViewContents()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt;设置一个视图作为视图层级的根视图。这就是之前设置的实力变量&lt;code class=&quot;highlighter-rouge&quot;&gt;containerView&lt;/code&gt;。然后添加这个根视图到scroll view。这是关键，如果你打算让view被放大，只能有一个view可以被添加到scroll view。因为正如你将回调的，你在代理的回调方法&lt;code class=&quot;highlighter-rouge&quot;&gt;viewForZoomingInScrollView&lt;/code&gt;只能返回一个视图。你设置&lt;code class=&quot;highlighter-rouge&quot;&gt;zoomScale&lt;/code&gt;为1代替&lt;code class=&quot;highlighter-rouge&quot;&gt;minScale&lt;/code&gt;,使contentview正常大小，代替屏幕大小。&lt;/p&gt;

&lt;p&gt;同样的，实现&lt;code class=&quot;highlighter-rouge&quot;&gt;centerScrollViewContents&lt;/code&gt;和两个&lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollViewDelegate&lt;/code&gt;的代理方法。对于原先的版本，用&lt;code class=&quot;highlighter-rouge&quot;&gt;containerView&lt;/code&gt;取代&lt;code class=&quot;highlighter-rouge&quot;&gt;imageView&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func centerScrollViewContents() {
  let boundsSize = scrollView.bounds.size
  var contentsFrame = containerView.frame
 
  if contentsFrame.size.width &amp;lt; boundsSize.width {
    contentsFrame.origin.x = (boundsSize.width - contentsFrame.size.width) / 2.0
  } else {
    contentsFrame.origin.x = 0.0
  }
 
  if contentsFrame.size.height &amp;lt; boundsSize.height {
    contentsFrame.origin.y = (boundsSize.height - contentsFrame.size.height) / 2.0
  } else {
    contentsFrame.origin.y = 0.0
  }
 
  containerView.frame = contentsFrame
}
 
func viewForZoomingInScrollView(scrollView: UIScrollView!) -&amp;gt; UIView! {
  return containerView
}
 
func scrollViewDidZoom(scrollView: UIScrollView!) {
  centerScrollViewContents()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;备注：你可能留意到了&lt;code class=&quot;highlighter-rouge&quot;&gt;UITapGestureRecognizer&lt;/code&gt;的不足。这是让这部分教程更简单。随意添加进去作为额外的练习。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在编译并且运行你的项目，这次，点击&lt;code class=&quot;highlighter-rouge&quot;&gt;Custom View Scroll&lt;/code&gt;,然后平移和缩放，是不是很棒？&lt;/p&gt;

&lt;h2 id=&quot;uiscrollview&quot;&gt;可翻页的UIScrollView&lt;/h2&gt;

&lt;p&gt;原文：&lt;a href=&quot;http://www.raywenderlich.com/76436/use-uiscrollview-scroll-zoom-content-swift&quot;&gt;UIScrollView Tutorial: Getting Started&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://liuwei.co/tutorial/translation/uiscrollview/ios/2015/08/18/use-uiscrollview-scroll-zoom-content-swift.html</link>
        <guid isPermaLink="true">http://liuwei.co/tutorial/translation/uiscrollview/ios/2015/08/18/use-uiscrollview-scroll-zoom-content-swift.html</guid>
        
        
        <category>tutorial</category>
        
        <category>translation</category>
        
        <category>UIScrollView</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>提高IOS开发效率的一些小技巧</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;一，快捷键&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;1.添加删除当前行快捷键&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vim /Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Resources/IDETextKeyBindingSet.plist
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;找到Deletion节点，添加以下代码:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;key&amp;gt;Delete Current Line&amp;lt;/key&amp;gt; 
&amp;lt;string&amp;gt;deleteToBeginningOfLine:, moveToEndOfLine:, deleteToBeginningOfLine:, deleteBackward:, moveDown:, moveToBeginningOfLine:&amp;lt;/string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;依次点击 &lt;code class=&quot;highlighter-rouge&quot;&gt;xcode -&amp;gt; Preferences -&amp;gt; Key Bindings&lt;/code&gt; 在输入框中输入delete current line , 在右边的Key一栏中绑定快捷键，这里我喜欢Eclipse的风格&lt;code class=&quot;highlighter-rouge&quot;&gt;command + d&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20150817/xcode-command+d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;2.修改默认快捷键&lt;/h3&gt;

&lt;p&gt;平时在开发过程中，我用到最多的快捷键是布局界面的切换和查找，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20150817/xcode-shortcut-key.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;code-snippets&quot;&gt;二，Code Snippets&lt;/h2&gt;

&lt;p&gt;把一些常用的代码块作为自定义code snippets，这个因人而异。我这里定义了一些常用的注释，GCD，ifelse，switch等。&lt;br /&gt;
这里推荐一个插件，&lt;a href=&quot;https://github.com/acoomans/ACCodeSnippetRepositoryPlugin&quot;&gt;ACCodeSnippetRepository&lt;/a&gt;   &lt;br /&gt;
这个是我的snippets repository：https://github.com/liuweicode/snippets&lt;/p&gt;

&lt;h2 id=&quot;xcode&quot;&gt;三，xcode插件&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/supermarin/Alcatraz&quot;&gt;Alcatraz&lt;/a&gt;：Package manager for Xcode&lt;/p&gt;

</description>
        <pubDate>Sun, 16 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://liuwei.co/trick/skill/xcode/ios/2015/08/16/some-tricks-to-improve-efficiency-of-development.html</link>
        <guid isPermaLink="true">http://liuwei.co/trick/skill/xcode/ios/2015/08/16/some-tricks-to-improve-efficiency-of-development.html</guid>
        
        
        <category>trick</category>
        
        <category>skill</category>
        
        <category>xcode</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>搭建个人知识管理平台</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;环境&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;ECS 1核/1G/CentOS6.5 x64&lt;/li&gt;
  &lt;li&gt;Nginx 1.0.15&lt;/li&gt;
  &lt;li&gt;Nodejs v0.12.7&lt;/li&gt;
  &lt;li&gt;Forever v0.15.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;安装&lt;/h2&gt;

&lt;p&gt;前期服务器搭建，反向代理设置等已经做好，下面只记录一下Raneto的安装过程。主要是针对自己的喜好，做了一些修改。&lt;/p&gt;

&lt;h3 id=&quot;ranetohttpsgithubcomgilbitronranetoreleases&quot;&gt;1.下载 &lt;a href=&quot;https://github.com/gilbitron/Raneto/releases&quot;&gt;Raneto&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;目前最新版本v0.6.0，下载并解压到网站根目录：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://github.com/gilbitron/Raneto/archive/0.6.0.tar.gz
tar -zxvf 0.6.0.tar.gz -C /home/wwwroot/
cd /home/wwwroot/
mv Raneto-0.6.0 liuwei.co
chown www.www liuwei.co -R
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;2.修改首页列表宽度全屏&lt;/h3&gt;

&lt;p&gt;将首页列表宽度改成100%&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /home/wwwroot/liuwei.co
vim public/styles/raneto.css
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;将下面的代码添加到最后:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/*将首页列表宽度改成100%*/
.col-sm-4 {
width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;3.添加中文搜索支持&lt;/h3&gt;

&lt;p&gt;感谢&lt;a href=&quot;https://github.com/nandy007/lunr.js&quot;&gt;nandy007&lt;/a&gt;为lunr.js添加了中文搜索的支持，修改package.json：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim package.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;找到&lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt;节点下面的&lt;code class=&quot;highlighter-rouge&quot;&gt;lunr&lt;/code&gt;模块，如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;dependencies&quot;: {
&quot;body-parser&quot;: &quot;~1.0.0&quot;,
&quot;cookie-parser&quot;: &quot;~1.0.1&quot;,
&quot;debug&quot;: &quot;~0.7.4&quot;,
&quot;express&quot;: &quot;~4.2.0&quot;,
&quot;extend&quot;: &quot;^1.2.1&quot;,
&quot;glob&quot;: &quot;^4.0.0&quot;,
&quot;hogan-express&quot;: &quot;^0.5.2&quot;,
&quot;lunr&quot;: &quot;^0.5.3&quot;,
&quot;marked&quot;: &quot;^0.3.2&quot;,
&quot;moment&quot;: &quot;^2.6.0&quot;,
&quot;morgan&quot;: &quot;~1.0.0&quot;,
&quot;raneto-core&quot;: &quot;0.x&quot;,
&quot;static-favicon&quot;: &quot;~1.0.0&quot;,
&quot;underscore&quot;: &quot;^1.6.0&quot;,
&quot;underscore.string&quot;: &quot;^2.3.3&quot;,
&quot;validator&quot;: &quot;^3.13.0&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;替换成下面的代码:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;dependencies&quot;: {
&quot;body-parser&quot;: &quot;~1.0.0&quot;,
&quot;cookie-parser&quot;: &quot;~1.0.1&quot;,
&quot;debug&quot;: &quot;~0.7.4&quot;,
&quot;express&quot;: &quot;~4.2.0&quot;,
&quot;extend&quot;: &quot;^1.2.1&quot;,
&quot;glob&quot;: &quot;^4.0.0&quot;,
&quot;hogan-express&quot;: &quot;^0.5.2&quot;,
&quot;lunr&quot;: &quot;https://github.com/liuweicode/lunr.js&quot;,
&quot;marked&quot;: &quot;^0.3.2&quot;,
&quot;moment&quot;: &quot;^2.6.0&quot;,
&quot;morgan&quot;: &quot;~1.0.0&quot;,
&quot;raneto-core&quot;: &quot;0.x&quot;,
&quot;static-favicon&quot;: &quot;~1.0.0&quot;,
&quot;underscore&quot;: &quot;^1.6.0&quot;,
&quot;underscore.string&quot;: &quot;^2.3.3&quot;,
&quot;validator&quot;: &quot;^3.13.0&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;forever&quot;&gt;4.安装依赖并forever启动&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install
forever stop bin/www
forever start -e error.log bin/www  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;5.打开浏览器访问&lt;/h3&gt;
&lt;p&gt;完毕&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;============2015年8月17日 修改================&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim views/home.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;找到&lt;code class=&quot;highlighter-rouge&quot;&gt;Main Articles&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;修改如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;panel panel-default &quot;&amp;gt;
&amp;lt;!-- &amp;lt;h2 class=&quot;panel-heading&quot;&amp;gt;Main Articles&amp;lt;/h2&amp;gt; --&amp;gt;
&amp;lt;h2 class=&quot;panel-heading&quot;&amp;gt;To be a stronger and better version of myself!&amp;lt;/h2&amp;gt;
&amp;lt;ul class=&quot;list-group pages&quot;&amp;gt;

&amp;lt;li class=&quot;list-group-item page&quot;&amp;gt;&amp;lt;a href=&quot;/&quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;

&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;todo&quot;&gt;TODO&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;首页添加日期显示&lt;/li&gt;
  &lt;li&gt;首页添加翻页功能&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 16 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://liuwei.co/wiki/share/2015/08/16/create-a-personal-wiki-platform.html</link>
        <guid isPermaLink="true">http://liuwei.co/wiki/share/2015/08/16/create-a-personal-wiki-platform.html</guid>
        
        
        <category>Wiki</category>
        
        <category>Share</category>
        
      </item>
    
  </channel>
</rss>
